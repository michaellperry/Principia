namespace Principia.Model;

fact Individual {
key:
    string anonymousId;
	//principal;

query:
	Accept* coursesAccepted {
		Accept a : a.grant.request.individual = this
			where not a.isDeleted
	}
}


/////////////////////////////////
// Sharing

fact Token {
key:
	string identifier;
}

fact Request {
key:
	publish Individual individual;
	publish Token token;

	//from individual;
}

fact Grant {
key:
	Request request;
	Course course;

	//to request.individual;
	//unlock course;
}

fact Accept {
key:
	unique;
	Grant grant;
	
	//from grant.request.individual;

query:
	bool isDeleted {
		exists AcceptDelete d : d.accept = this
	}
}

fact AcceptDelete {
key:
	Accept accept;

	//from accept.grant.request.individual;
}


///////////////////////////////////
// Courses

fact Course {
key:
	unique;

mutable:
	string title;
	string shortDescription;
	string description;

query:
	Module* modules {
		Module m : m.course = this
	}
}

fact Module {
key:
	unique;
	publish Course course;

mutable:
	int ordinal;
	string title;

query:
	Clip* clips {
		ClipModule cm : cm.module = this
			where cm.isCurrent
		Clip c : c = cm.clip
	}
}

fact Clip {
key:
	unique;
	publish Course course;

mutable:
	int ordinal;
	string title;
}

fact ClipModule {
key:
	Clip clip;
	Module module;
	ClipModule* prior;

query:
	bool isCurrent {
		not exists ClipModule next : next.prior = this
	}
}
