namespace Principia.Model;

fact Individual {
key:
    string anonymousId;
	//principal;

query:
	Profile* profiles {
		Profile p : p.individual = this
	}

	Accept* coursesAccepted {
		Accept a : a.grant.request.profile.individual = this
			where not a.isDeleted
	}

	Course* courses {
		Accept a : a.grant.request.profile.individual = this
			where not a.isDeleted
		Course c : c = a.grant.course
	}

	CourseContent* courseContents {
		Accept a : a.grant.request.profile.individual = this
			where not a.isDeleted
		CourseContent cc : cc.course = a.grant.course
	}
}

fact Profile {
key:
	publish Individual individual;

	//from individual;

mutable:
	publish string name;
}


/////////////////////////////////
// Sharing

fact Token {
key:
	string identifier;

query:
	Request* requests {
		Request r : r.token = this
	}
}

fact Request {
key:
	publish Profile profile;
	publish Token token;

	//from profile.individual;

query:
	Course* courses {
		Grant g : g.request = this
		Course c : c = g.course
	}
}

fact Grant {
key:
	Request request;
	Course course;

	//to request.profile.individual;
	//unlock course;
}

fact Accept {
key:
	unique;
	Grant grant;
	
	//from grant.request.profile.individual;

query:
	bool isDeleted {
		exists AcceptDelete d : d.accept = this
	}
}

fact AcceptDelete {
key:
	Accept accept;

	//from accept.grant.request.profile.individual;
}


///////////////////////////////////
// Courses

fact Course {
key:
	unique;

mutable:
	publish string title;
	publish string shortDescription;

query:
	CourseContent* contents {
		CourseContent cc : cc.course = this
	}

	Module* modules {
		Module m : m.courseContent.course = this
	}
}

fact CourseContent {
key:
	publish Course course;

mutable:
	publish string description;
}

fact Module {
key:
	unique;
	publish CourseContent courseContent;

mutable:
	int ordinal;
	string title;

query:
	Clip* clips {
		ClipModule cm : cm.module = this
			where cm.isCurrent
		Clip c : c = cm.clip
	}
}

fact Clip {
key:
	unique;
	publish CourseContent courseContent;

mutable:
	int ordinal;
	string title;
}

fact ClipModule {
key:
	Clip clip;
	Module module;
	ClipModule* prior;

query:
	bool isCurrent {
		not exists ClipModule next : next.prior = this
	}
}
